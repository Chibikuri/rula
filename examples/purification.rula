import std::{get_qubit_status, borrow_qubit};
import std::operation::{cnot, pauli_x, pauli_z}; // remote cnot

// predefined conf
#def CONF = conf!{
	
}

// rule for purification<CONF>
//...config for measurement timing, swapping order, etc
// Nested Rule
// 1. Default qubit (q1)
// 2. 

rule <CONF> local_operation<q1: Qubit>() -> (Result, Qubit) {
	// define future for qubit status
	let status_q1 = get_qubit_status(q1);
	let q2_pid: PId = get_free_qubit_pid();
	
	let result;
	cond (q1, status_q1, q2_pid){
		// qubit 1 is ready and locked for this rule process
		status_q1.ready(); 
		request(q2_pid).connect();
	} => act {
		cnot(q1, q2_pid);
		result = measure(q2_pid);
	};
	return (result, q1);
}

rule <CONF> parity_check<q1: Qubit> (q3: Qubit) -> (Result) {

}

rule <CONF> purification<q1: Qubit> (q2: Qubit) -> (bool) {
	local_operation()
}

