import std::{get_qubit, free};
import std::operation::{cnot, pauli_x, pauli_z}; // remote cnot

// predefined conf
#def CONF = conf!{
	
}

// rule for purification<CONF>
//...config for measurement timing, swapping order, etc
// Nested Rule
// 1. Default qubit (q1)
// 2. 

#interface: {qn0};

rule default<qn0>() {
	cond{
		time() - qubit.initiated() > 0.0003,
	} => act{
		free(q);
	}

}

rule local_operation<qn0>() {
	// define future for qubit status
	let (q0, q1) = get_qubit(#qn0, 2);

	cond {
		// qubit 1 is ready and locked for this rule process
		q0.ready(),
		q1.ready(),
		q0.expected_fidelity() > 0.8 && q0.expected_fidelity() < 0.95,

	} => act {
		cnot(q1, q2_pid);
		result = measure(q2_pid);
	}
	return (result, q1);
}

rule <CONF> parity_check<q1: Qubit> (q3: Qubit) -> (Result) {

}

rule <CONF> purification<q1: Qubit> (q2: Qubit) -> (bool) {
	local_operation()
}

