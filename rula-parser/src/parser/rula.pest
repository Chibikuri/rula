// Everything starts here
rula = { SOI ~ COMMENT? ~ program ~ COMMENT? ~ EOI }

// Program endpoing
program = { ( stmt )* }

// Statement includes {let, braced statement, expression}
stmt = {interface_def| let_stmt | brace_stmt | expr }

// Interface_def 
interface_def = {"#interface:" ~ "{" ~ ident_list ~ "}" ~ ("=>" ~ ident)? ~ ";"}

// Variable assignment
let_stmt = { ^"let" ~ ( ident_typed | ident ) ~ ("=" ~ expr )? ~ ";" }

// Expressions
expr = { ( import_expr
           | fn_def_expr
           | if_expr
           | for_expr
           | while_expr
           | struct_expr
           | return_expr
           | match_expr
           | ruleset_expr
           | rule_expr
           | cond_expr
           | act_expr
           | comp_expr
           | braket_expr
           | fn_call_expr
           | variable_call_expr
           | term_expr
           | literal_expr
            ) }

// Import statement (e.g. import hello::world; import hello::world::{yo, ya};)
import_expr = { ^"import" ~ ident ~ ( "::" ~ ident )* ~ ( "::" ~ "{" ~ ident_list ~ "}")?  ~ !"::" ~ ";" }

// If expression (e.g. if (block > 0) {expreesion;};)
if_expr = { ^"if" ~ paren_expr ~ brace_stmt ~ ( else_if_expr )* ~ else_expr? }
else_if_expr = { ^"else" ~ ^"if" ~ paren_expr ~ brace_stmt }
else_expr = { ^"else" ~ brace_stmt }

// For expression (e.g. for (i) in [0..10]{})
for_expr = { ^"for" ~ "(" ~ pattern ~")"~ "in" ~ generator ~ brace_stmt }
pattern = _{ ident_list }
// generator will be more flex
// literal must be identifiers
generator = { braket_expr | fn_call_expr | literal_expr }

// While expression (e.g. while(True){doforever})
while_expr = { ^"while" ~ paren_expr ~ brace_stmt }

// Function definition expression (e.g. fn hello(){world})
fn_def_expr = { ^"fn" ~ argument_def ~ brace_stmt }
argument_def = { "(" ~ ( ( ident_typed | ident )? ~ ( "," ~ ( ident_typed | ident ) )* ) ~ ")" }

// Fnction call expression with parenthesis
fn_call_expr = { ident ~ "(" ~ fn_call_args? ~ ("," ~ fn_call_args)* ~ ")" }
fn_call_args = { expr | ident }

// Variable call
variable_call_expr = { ( fn_call_expr | ident ) ~ "." ~ ( fn_call_expr | ident ) ~ ("." ~ ( fn_call_expr | ident ))*}

// Struct expression to define ordinary structure
struct_expr = {^"struct" ~ struct_name ~ "{" ~ (ident_typed)? ~ ("," ~ ident_typed)* ~ ","? ~ "}"}
struct_name = {ident} // for parser use

// Return expression to return variables
return_expr = {^"return" ~ ( ident | tuple | fn_call_expr )?}
tuple = {"(" ~ literal_list? ~ ")"}

// Match expression to do pattern matching
match_expr = {^"match" ~ (ident ~ ":")? ~ expr ~ "{" ~ (match_condition ~ "=>" ~ match_action ~ ",")* ~ (^"finally" ~ "=>" ~ match_action)? ~ "}"}
match_condition = {"(" ~ expr ~ ")"}
match_action = {"{" ~ expr? ~ ("," ~ expr)* ~ "}"}

// RuleSet expression that holds multiple rules
ruleset_expr = {^"ruleset" ~ "(" ~ ruleset_config?~ ")" ~ ident ~ "{" ~ rules? ~ "}" }
// This should be flex
ruleset_config = {"CONFIG"}
rules = _{("default:" ~ fn_call_expr)? ~ (stmt)*}

// Rule expression to define RuLa rule
rule_expr = { ^"rule" ~ ident ~ "<" ~ ident_list?~ ">"~ argument_def ~ "{" ~ rule_contents ~ "}" }
// Should have better way to do preprocessing
rule_contents = { monitor_expr? ~ cond_expr ~ "=>" ~ act_expr ~ (stmt)* }

monitor_expr = { ^"watch:" ~ (let_stmt)* }
// Condition expression for qubit to wait until all meet
// brace_stmt is a little vague?
cond_expr = { ^"cond" ~ ident? ~ "{" ~ stmt? ~ ("," ~ stmt)* ~ ","? ~ "}" }
// awaitable = {expr} // for now, awaitable could be expression?

// Action expression for qubit to act on operations
act_expr = { ^"act" ~ ident? ~ "{" ~ (stmt)* ~ "}"}
// operatable = _{ident}

// Term expr without any operator recedence
term_expr = { inner_term ~ ( op ~ inner_term )* }
inner_term = _{ number | "(" ~ term_expr ~ ")" }

// A set of arithmetic operations for tems
op = _{ ( plus | minus | asterisk | slash | caret ) }
plus = { "+" }
minus = { "-" }
asterisk = { "*" }
slash = { "/" }
caret = { "^" }

// Comparison (no chain comparison allowed)
comp_expr = { comparable ~ comp_op ~ comparable }
comparable = { variable_call_expr | fn_call_expr | term_expr | literal_expr }
comp_op = { "<" | ">" | "=<" | ">=" | "==" | "!="}

// Braket expression
braket_expr = {"[" ~ literal_list? ~ "]"}

// Expression with angle brakets
angle_expr = _{"<" ~ ( ( ident_typed? ~ ( "," ~ ident_typed )* ) )? ~ ">"}

// Expression with parenthesis
paren_expr = _{ "(" ~ ( expr )?  ~ ")" }

// Statement srrounded by curly brace
brace_stmt = _{ "{" ~ stmt? ~ "}" }

// Identifiers
ident_list = { ( ident | ident_typed ) ~ ( "," ~ ( ident | ident_typed ) )* }
ident_typed = { ident ~ ( ":" ~ typedef_lit ) }
ident = @{ "#"? ~ ASCII_ALPHA~ ( ASCII_ALPHA | ASCII_DIGIT | "_" )* }

// Literals (ref: https://pest.rs/book/examples/rust/literals.html)
literal_expr = { ( bool | string | ident | number | binary | hex | unicord ) }
literal_list = {literal_expr ~ ("," ~ literal_expr)*}

// Boolean literal
bool = { true_lit | false_lit }
true_lit  = @{ "true" }
false_lit = @{ "false" }

// number literal (int, float)
number = @{ int ~ ( "." ~ ASCII_DIGIT* )? ~ ( ^"e" ~ int )? }

// Integer literal (10, 1000, 10e10, -10, -10e-10 etc)
// This will allow white space between digits (FIXME)
int = { "-"? ~ ASCII_DIGIT+ ~ ( "e" ~ ( "+" | "-" )? ~ ASCII_DIGIT+ )? ~!( ASCII_ALPHA ) } 
// Binary literals (e.g. b101100)
binary = { "0b" ~ bin_num}
bin_num = {( "0" | "1" )*}

// Hex digit literals (e.g. x109ab2)
// Should this be case sensitive?
hex = { "0x" ~ hex_num}
hex_num = {( ASCII_DIGIT | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F" )*}

// Unicord
unicord = { "0u" ~  hex_num }

// String literals (escape should be added later)
string = _{ "\"" ~ ( raw_string )* ~ "\"" }
raw_string = { (!( "\\" | "\"" ) ~ ANY )+ }

// Type definition literal
typedef_lit = { ( integer_type
                  | unsigned_integer_type
                  | float_type
                  | complex_type
                  | boolean_type
                  | string_type
                  | qubit_type
) }
integer_type = { ( "i32" | "i64" ) }
unsigned_integer_type = { ( "u32" | "u64" ) }
float_type = { ( "f32" | "f64" ) }
complex_type = { ( "c64" | "c128" ) }
boolean_type = { "bool" }
string_type = { "str" }
qubit_type = { "Qubit" }
reserved_words = { "OR" }
 
COMMENT = _{ ( "/*" ~ ( !"*/" ~ ANY )* ~ "*/" | "//" ~ ( !"\n" ~ ANY )* ~ ( "\n" | EOI ) ) }
WHITESPACE = _{ ( " " | "\n" ) }